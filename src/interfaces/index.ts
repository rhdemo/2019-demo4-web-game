export enum ConfigGameMode {
  Active = 'active',
  Borked = 'borked',
  Paused = 'paused',
  Stopped = 'stopped',
  Loading = 'loading',
  Ready = 'ready'
}

export interface GameConfiguration {
  gameState: ConfigGameMode
  playerId?: string
  username?: string    // randomly generated by the backend
  score?: number       // users stored score. Zero if the player is new
}

export namespace WSS {

  export namespace OutgoingFrames {
    export enum Type {
      Motion = 'motion'
    }

    export interface OutgoingFrameBase {
      type: Type,
      data: any
    }

    export interface MotionDataPayload {
      motion: number[][]
      orientation: number[][]
    }
  }

  export namespace IncomingFrames {
    export enum Type {
      Config = 'config',
      Score = 'score'
    }

    export interface FrameBase {
      type: string
    }

    export interface Config extends FrameBase, GameConfiguration {
      type: Type.Config
    }

    export interface Score extends FrameBase {
      type: Type.Score
      total: number,
      gesture: string   // if we're recognizing gestures instead of just movement
      intensity: string // some kind of measure indicating the impact of the player's movements
    }

    export interface ClassifiedFrame {
      type: Type,
      data: Config | Score
    }
  }
}


