
export namespace WebSocketFrames {
  export enum FrameType {
    Config = 'config',
    Score = 'score'
  }

  export enum ConfigGameMode {
    Active = 'active',
    Paused = 'paused',
    Stopped = 'stopped'
  }

  export interface FrameBase {
    type: string
  }

  export interface Config extends FrameBase {
    type: FrameType.Config
    gameState: ConfigGameMode
    playerId: string
    username: string    // randomly generated by the backend
    score: number       // users stored score. Zero if the player is new
  }

  export interface Score extends FrameBase {
    type: FrameType.Score
    total: number,
    gesture: string   // if we're recognizing gestures instead of just movement
    intensity: string // some kind of measure indicating the impact of the player's movements
  }
}

export interface ClassifiedFrame {
  type: WebSocketFrames.FrameType,
  data: WebSocketFrames.Config | WebSocketFrames.Score
}

/**
 * Classifies incoming frames and wraps them in a ClassifiedFrame Object with
 * their given type classification and original payload
 * @param payload
 */
export function classify (payload: string): ClassifiedFrame | null {
  try {
    const parsed = JSON.parse(payload) as WebSocketFrames.FrameBase

    if (parsed.type === WebSocketFrames.FrameType.Config) {
      return {
        type: WebSocketFrames.FrameType.Config,
        data: parsed as WebSocketFrames.Config
      }
    } else if (parsed.type === WebSocketFrames.FrameType.Score) {
      return {
        type: WebSocketFrames.FrameType.Score,
        data: parsed as WebSocketFrames.Score
      }
    } else {
      return null
    }
  } catch (e) {
    console.error('received malformed message from wss')
    console.error(payload)

    return null
  }
}
