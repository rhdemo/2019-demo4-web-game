export enum ConfigGameMode {
  Active = 'active',
  Borked = 'borked',
  Paused = 'paused',
  Stopped = 'stopped',
  Loading = 'loading',
  Ready = 'ready',
  Lobby = 'lobby'
}

export interface GestureHistoryEntry {
  gesture: string
  uuid: string
}

export interface GameConfiguration {
  gameState: ConfigGameMode
  playerId: string
  machineId: number
  machineHealth: number
  username: string // randomly generated by the backend
  score: number // users stored score. Zero if the player is new
  gameMotions: {
    // Moves will be in an on/off (true/false) state controlled by the admin interface
    [key: string]: boolean
    circle: boolean
    fever: boolean
    floss: boolean
    roll: boolean
    shake: boolean
    x: boolean
  }
}

export interface MotionVectors {
  orientation: number[][]
  motion: number[][]
}

export namespace WSS {
  export namespace OutgoingFrames {
    export enum Type {
      Motion = 'motion',
      MotionRaw = 'motion-raw',
      Training = 'training',
      GameStateChange = 'game',
      Connection = 'connection'
    }

    export interface OutgoingFrame {
      type: Type
      [key: string]: any
    }

    export interface MotionDataPayload {
      motion: number[][]
      orientation: number[][]
      uuid: string
      gesture: string
    }

    export interface GameStateChangePayload {
      state: string
    }

    export interface Connection {}
  }

  export namespace IncomingFrames {
    export enum Type {
      Config = 'configuration',
      Score = 'score',
      Heartbeat = 'heartbeat',
      MotionFeedback = 'motion_feedback',
      Machine = 'machine'
    }

    export interface FrameBase {
      type: string
    }

    export interface Config extends FrameBase, GameConfiguration {
      type: Type.Config
    }

    export interface MotionFeedback extends FrameBase {
      type: Type.MotionFeedback
      correct: boolean
      gesture: string
      probability: number
      uuid: string
      score: number
      totalScore: number
      prediction: {
        candidate: string
        candidate_score: number
        predications: {
          'draw-circle': number
          'draw-cross': number
          fever: number
          floss: number
          roll: number
          shake: number
        }
      }
    }

    export interface Machine extends FrameBase {
      type: Type.Machine
      id: number
      percent: number
    }

    export interface Score extends FrameBase {
      type: Type.Score
      total: number
      gesture: string // if we're recognizing gestures instead of just movement
      intensity: string // some kind of measure indicating the impact of the player's movements
      machineId: string // we need to identify the targetted machine, though we probably know in advance
    }

    export interface Heartbeat extends FrameBase {
      type: Type.Heartbeat
    }

    export interface ClassifiedFrame {
      type: Type
      data: Config | Score | Heartbeat
    }
  }
}
